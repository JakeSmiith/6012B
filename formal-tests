# install.packages(c(
#   "readxl","dplyr","lubridate","purrr","zoo","timeDate",
#   "tidyr","broom","boot"
# ))  # run if needed

library(readxl)
library(dplyr)
library(lubridate)
library(zoo)
library(timeDate)
library(tidyr)
library(broom)
library(boot)
library(purrr)

# 1. Load & clean each sheet --------------------------------------------------

file_path <- "C:/Users/jakes/Downloads/quantum_and_index_volumes.xlsx"
sheets    <- excel_sheets(file_path)

read_and_clean <- function(sheet) {
    df <- read_excel(file_path, sheet = sheet) %>%
        select(where(~ !all(is.na(.))))
    names(df) <- names(df) %>% 
        tolower() %>% 
        gsub("[^a-z0-9]+","_",.)
    date_col <- grep("^date$", names(df), ignore.case=TRUE, value=TRUE)[1]
    num_cols <- setdiff(names(df)[sapply(df,is.numeric)], date_col)
    vol_col  <- grep("vol",  num_cols, ignore.case=TRUE, value=TRUE)[1]
    price_col <- { tmp <- grep("price|last|close", num_cols, ignore.case=TRUE, value=TRUE)
    if(length(tmp)) tmp[1] else setdiff(num_cols, vol_col)[1] }
    df %>%
        rename(
            date   = all_of(date_col),
            volume = all_of(vol_col),
            price  = all_of(price_col)
        ) %>%
        mutate(
            date   = as_date(date),
            symbol = sheet
        ) %>%
        arrange(date) %>%
        distinct(date, .keep_all = TRUE)
}

df_all <- map_dfr(sheets, read_and_clean)

# 2. Compute daily metrics ------------------------------------------------------

df_all <- df_all %>%
    group_by(symbol) %>%
    arrange(date) %>%
    mutate(
        ret        = log(price / lag(price)),       
        volume_pct = volume / lag(volume) - 1,      
        real_vol   = rollapply(ret, 20, sd, align="right", fill=NA),
        vol_change = real_vol - lag(real_vol)       
    ) %>%
    ungroup()

# 3. Define windows -------------------------------------------------------------

event_date  <- as_date("2025-01-08")
window_days <- c(5, 20, 60)

stocks  <- c("IONQ","QBTS","RGTI")
indexes <- c("CCMP","RTY")
metrics <- c("ret","volume_pct","vol_change")

# helper to bootstrap difference in means
boot_diff_mean <- function(dat, i) {
    x <- dat[i,1]; y <- dat[i,2]
    mean(y, na.rm=TRUE) - mean(x, na.rm=TRUE)
}

# 4. Build combinations and extract pre/post differences -----------------------

results <- expand_grid(
    stock  = stocks,
    index  = indexes,
    metric = metrics,
    window = window_days
) %>%
    mutate(
        pairs = pmap(
            list(stock, index, metric, window),
            function(stock, index, metric, window) {
                # pre-event
                pre_s  <- df_all %>%
                    filter(symbol==stock, date>=event_date-window, date<event_date) %>%
                    select(date, val_s = all_of(metric))
                pre_i  <- df_all %>%
                    filter(symbol==index, date>=event_date-window, date<event_date) %>%
                    select(date, val_i = all_of(metric))
                # post-event
                post_s <- df_all %>%
                    filter(symbol==stock, date>=event_date, date<event_date+window) %>%
                    select(date, val_s = all_of(metric))
                post_i <- df_all %>%
                    filter(symbol==index, date>=event_date, date<event_date+window) %>%
                    select(date, val_i = all_of(metric))
                pre_df  <- inner_join(pre_s,  pre_i,  by="date")
                post_df <- inner_join(post_s, post_i, by="date")
                list(
                    pre  = pre_df$val_s  - pre_df$val_i,
                    post = post_df$val_s - post_df$val_i
                )
            }
        )
    ) %>%
    unnest_wider(pairs)  # gives list-columns `pre` and `post`

# 5. Run tests & bootstraps -----------------------------------------------------

results <- results %>%
    mutate(
        ttest   = map2(pre, post, ~ t.test(.x, .y, var.equal = FALSE)),
        wilcox  = map2(pre, post, ~ wilcox.test(.x, .y, exact = FALSE)),
        bootobj = map2(pre, post, ~ boot(cbind(.x, .y), statistic = boot_diff_mean, R = 2000))
    ) %>%
    mutate(
        t_stat   = map_dbl(ttest,   "statistic"),
        t_p      = map_dbl(ttest,   "p.value"),
        w_p      = map_dbl(wilcox,  "p.value"),
        ci_lower = map_dbl(bootobj, ~ tryCatch(boot.ci(.x, type="perc")$percent[4], error=function(e) NA_real_)),
        ci_upper = map_dbl(bootobj, ~ tryCatch(boot.ci(.x, type="perc")$percent[5], error=function(e) NA_real_))
    ) %>%
    select(stock, index, metric, window, t_stat, t_p, w_p, ci_lower, ci_upper)

# 6. Display -------------------------------------------------------------------

print(results)
